import { Injectable, Logger, type OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Bot } from 'grammy';
import { TranslatorService } from './translator/translator.service';

const SUPPORTED_LANGUAGES = [
  'ğŸ‡¬ğŸ‡§ English',
  'ğŸ‡¨ğŸ‡³ Chinese',
  'ğŸ‡ªğŸ‡¸ Spanish',
  'ğŸ‡·ğŸ‡º Russian',
  'ğŸ‡·ğŸ‡¸ Serbian',
  'ğŸ‡«ğŸ‡· French',
  'ğŸ‡®ğŸ‡³ Hindi',
  'ğŸ‡¸ğŸ‡¦ Arabic',
  'ğŸ‡§ğŸ‡© Bengali',
  'ğŸ‡µğŸ‡¹ Portuguese',
  'ğŸ‡µğŸ‡° Urdu',
  'ğŸ‡¯ğŸ‡µ Japanese',
  'ğŸ‡°ğŸ‡· Korean',
  'ğŸ‡¹ğŸ‡· Turkish',
  'ğŸ‡»ğŸ‡³ Vietnamese',
  'ğŸ‡©ğŸ‡ª German',
  'ğŸ‡®ğŸ‡© Indonesian',
  'ğŸ‡®ğŸ‡¹ Italian',
  'ğŸ‡¹ğŸ‡­ Thai',
  'ğŸ‡³ğŸ‡± Dutch',
  'ğŸ‡µğŸ‡± Polish',
  'ğŸ‡¸ğŸ‡ª Swedish',
  'ğŸ‡ºğŸ‡¦ Ukrainian',
  'ğŸ‡­ğŸ‡º Hungarian',
  'ğŸ‡¨ğŸ‡¿ Czech',
  'ğŸ‡¬ğŸ‡· Greek',
  'ğŸ‡²ğŸ‡¾ Malay',
  'ğŸ‡·ğŸ‡´ Romanian',
  'ğŸ‡µğŸ‡­ Tagalog/Filipino',
  'ğŸ‡©ğŸ‡° Danish',
  'ğŸ‡³ğŸ‡´ Norwegian',
  'ğŸ‡«ğŸ‡® Finnish',
  'ğŸ‡­ğŸ‡· Croatian',
  'ğŸ‡¸ğŸ‡° Slovak',
  'ğŸ‡¸ğŸ‡® Slovenian',
  'ğŸ‡§ğŸ‡¬ Bulgarian',
];

//

@Injectable()
export class TelegramTranslationBotService implements OnModuleInit {
  private readonly bot: Bot;
  private readonly logger = new Logger(TelegramTranslationBotService.name);

  constructor(
    private readonly configService: ConfigService,
    private readonly translator: TranslatorService,
  ) {
    const apiToken = configService.get<string | undefined>('BOT_API_TOKEN');

    this.bot = new Bot(apiToken);
  }

  onModuleInit() {
    this.initBot();
  }

  initBot() {
    this.bot.start().catch((reason) => console.error('Bot failed: ', reason));

    this.bot.on('message', (ctx, next) => {
      this.logger.debug('Received message: ', ctx.message);
      // console.log(ctx.message);
      // console.log('________________________________________');
      next();
    });

    this.bot.on('message').filter(
      async (ctx) => SUPPORTED_LANGUAGES.includes(ctx.message.text),
      (ctx) => {
        ctx.reply(`Added ${ctx.message.text} language`);
      },
    );

    this.bot.command('start', async (ctx) => {
      const keyboard = [];
      const columns = 2;
      for (let row = 0; row * columns < SUPPORTED_LANGUAGES.length; row += 1) {
        const start = row * columns;
        const end = start + columns;
        keyboard[row] = SUPPORTED_LANGUAGES.slice(start, end).map((lang) => ({
          text: lang,
        }));
      }

      ctx.reply('Choose desired languages', {
        reply_markup: {
          keyboard,
          resize_keyboard: true,
        },
      });

      this.logger.debug(ctx.message);
    });

    this.bot.command('t', async (ctx) => {
      const textForTranslation = ctx.match;

      this.logger.log('Translation request. Text: ', textForTranslation);

      ctx.replyWithChatAction('typing');

      const HARDCODED_TARGET_LANGUAGES = ['Russian', 'English', 'Serbian'];

      try {
        // const translations = await this.translator.translate(
        //   textForTranslation,
        //   HARDCODED_TARGET_LANGUAGES,
        // );
        const translations = {
          Russian: 'ĞŸÑ€Ğ¸Ğ²ĞµÑ‚! ĞšĞ°Ğº Ğ´ĞµĞ»Ğ°? Ğ¥Ğ¾Ñ‡ĞµÑˆÑŒ Ğ¿Ğ¾Ğ¹Ñ‚Ğ¸ Ğ²Ñ‹Ğ¿Ğ¸Ñ‚ÑŒ Ğ¿Ğ¸Ğ²Ğ¾?',
          Serbian: 'Zdravo! Å ta ima? Da li Å¾eliÅ¡ da idemo na pivo?',
        };

        const formattedTranslations = Object.entries(translations)
          .map(
            ([language, translation]) => `<b>${language}:</b>\n${translation}`,
          )
          .join('\n\n');

        ctx.reply(formattedTranslations, {
          parse_mode: 'HTML',
          reply_parameters: { message_id: ctx.message.message_id },
        });
      } catch (error) {
        this.logger.error('Translation failed ', error);
        ctx.reply('Sorry. There was error translating your message.');
      }
    });
  }
}
